name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        run: bun install

      - name: Build the app
        run: bun run tauri build ${{ matrix.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: launcher-macos-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app.tar.gz
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app.tar.gz.sig

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: launcher-linux-${{ matrix.arch }}
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/appimage/*.AppImage.sig

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: launcher-windows-${{ matrix.arch }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/nsis/*.exe.sig

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: FORGE Launcher ${{ steps.get_version.outputs.version }}
          body: |
            ## FORGE Launcher ${{ steps.get_version.outputs.version }}
            
            ### Downloads
            - **Windows**: Download the `.msi` or `.exe` installer
            - **macOS**: Download the `.dmg` file
            - **Linux**: Download the `.deb` package or `.AppImage`
            
            ### Changes
            - See the [changelog](CHANGELOG.md) for details
            
            ### Installation
            1. Download the appropriate file for your operating system
            2. Install using your system's standard installation method
            3. Launch the FORGE Launcher
            
            **Note**: This is an automated release. Please report any issues on the [Issues](../../issues) page.
          draft: false
          prerelease: false

      - name: Generate latest.json for updater
        run: |
          # Create latest.json for the updater
          VERSION="${{ steps.get_version.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
          
          # Get current date in ISO format
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          
          # Initialize latest.json
          cat > latest.json << EOF
          {
            "version": "$VERSION_NO_V",
            "notes": "See the full changelog at https://github.com/${{ github.repository }}/releases/tag/$VERSION",
            "pub_date": "$PUB_DATE",
            "platforms": {
          EOF
          
          # Add platform entries
          FIRST_PLATFORM=true
          
          # Windows x64
          if find ./artifacts -name "*.exe" -type f | head -1 | grep -q .; then
            WINDOWS_FILE=$(find ./artifacts -name "*.exe" -type f | head -1)
            WINDOWS_SIG="${WINDOWS_FILE}.sig"
            if [ -f "$WINDOWS_SIG" ]; then
              SIGNATURE=$(cat "$WINDOWS_SIG")
              if [ "$FIRST_PLATFORM" != "true" ]; then
                echo "," >> latest.json
              fi
              cat >> latest.json << EOF
                "windows-x86_64": {
                  "signature": "$SIGNATURE",
                  "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename "$WINDOWS_FILE")"
                }
          EOF
              FIRST_PLATFORM=false
            fi
          fi
          
          # Linux x64
          if find ./artifacts -name "*.AppImage" -type f | head -1 | grep -q .; then
            LINUX_FILE=$(find ./artifacts -name "*.AppImage" -type f | head -1)
            LINUX_SIG="${LINUX_FILE}.sig"
            if [ -f "$LINUX_SIG" ]; then
              SIGNATURE=$(cat "$LINUX_SIG")
              if [ "$FIRST_PLATFORM" != "true" ]; then
                echo "," >> latest.json
              fi
              cat >> latest.json << EOF
                "linux-x86_64": {
                  "signature": "$SIGNATURE",
                  "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename "$LINUX_FILE")"
                }
          EOF
              FIRST_PLATFORM=false
            fi
          fi
          
          # macOS x64 (Intel)
          if find ./artifacts -name "*.app.tar.gz" -type f | grep x86_64 | head -1 | grep -q .; then
            MACOS_FILE=$(find ./artifacts -name "*.app.tar.gz" -type f | grep x86_64 | head -1)
            MACOS_SIG="${MACOS_FILE}.sig"
            if [ -f "$MACOS_SIG" ]; then
              SIGNATURE=$(cat "$MACOS_SIG")
              if [ "$FIRST_PLATFORM" != "true" ]; then
                echo "," >> latest.json
              fi
              cat >> latest.json << EOF
                "darwin-x86_64": {
                  "signature": "$SIGNATURE",
                  "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename "$MACOS_FILE")"
                }
          EOF
              FIRST_PLATFORM=false
            fi
          fi
          
          # macOS ARM64 (Apple Silicon)
          if find ./artifacts -name "*.app.tar.gz" -type f | grep aarch64 | head -1 | grep -q .; then
            MACOS_ARM_FILE=$(find ./artifacts -name "*.app.tar.gz" -type f | grep aarch64 | head -1)
            MACOS_ARM_SIG="${MACOS_ARM_FILE}.sig"
            if [ -f "$MACOS_ARM_SIG" ]; then
              SIGNATURE=$(cat "$MACOS_ARM_SIG")
              if [ "$FIRST_PLATFORM" != "true" ]; then
                echo "," >> latest.json
              fi
              cat >> latest.json << EOF
                "darwin-aarch64": {
                  "signature": "$SIGNATURE",
                  "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename "$MACOS_ARM_FILE")"
                }
          EOF
              FIRST_PLATFORM=false
            fi
          fi
          
          # Close the JSON
          cat >> latest.json << EOF
            }
          }
          EOF
          
          echo "Generated latest.json:"
          cat latest.json
          
      - name: Upload Release Assets
        run: |
          # Function to upload a file
          upload_file() {
            local file_path="$1"
            local file_name=$(basename "$file_path")
            # URL encode the filename to handle spaces and special characters
            local encoded_name=$(printf '%s' "$file_name" | jq -sRr @uri)
            echo "Uploading $file_name..."
            
            # Use curl with proper URL encoding
            response=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$file_path" \
                 "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${encoded_name}")
            
            http_code=$(echo "$response" | tail -c 4)
            if [[ "$http_code" =~ ^2[0-9]{2}$ ]]; then
              echo "✅ Successfully uploaded $file_name"
            else
              echo "❌ Failed to upload $file_name (HTTP: $http_code)"
              echo "Response: $(echo "$response" | head -c -4)"
              exit 1
            fi
          }
          
          # Upload latest.json first (important for updater)
          upload_file "latest.json"
          
          # Upload all artifacts including .sig files for updater
          find ./artifacts -type f \( -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" -o -name "*.sig" -o -name "*.app.tar.gz" \) | while read -r file; do
            upload_file "$file"
          done
